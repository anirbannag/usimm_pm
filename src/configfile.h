
#ifndef __CONFIG_FILE_IN_H__
#define __CONFIG_FILE_IN_H__

#include "params.h"

#define PROCESSOR_CLK_MULTIPLIER_VAL 	25
#define DIMM_CLK_MULTIPLIER_VAL			100
#define HMC_CLK_MULTIPLIER_VAL			64
#define SERDES_CLK_MULTIPLIER_VAL		8
#define NUM_HMCS_VAL			1
#define NUM_DIMMS_VAL			2
#define ROBSIZE_VAL				160
#define MAX_RETIRE_VAL			4
#define PIPELINEDEPTH_VAL		10
#define NUM_CHANNELS_VAL 		4
#define ADDRESS_MAPPING_VAL 	0
#define	ADDRESS_BITS_VAL 		36
#define RQ_LINK_LATENCY_VAL 	4
#define WQ_LINK_LATENCY_VAL 	16

#define NUM_VAULTS_DIMM 		1
#define	NUM_RANKS_DIMM 			2
#define	NUM_BANKS_DIMM 			8
#define	NUM_ROWS_DIMM 			32768
#define	NUM_COLUMNS_DIMM 		128
#define	CACHE_LINE_SIZE_DIMM 	64

#define T_RCD_DIMM				11 
#define T_RP_DIMM				11 
#define T_CAS_DIMM				11
#define T_RC_DIMM				39
#define T_RAS_DIMM				28
#define T_RRD_DIMM				5
#define T_FAW_DIMM				32
#define T_WR_DIMM				12
#define T_WTR_DIMM				6
#define T_RTP_DIMM				6
#define T_CCD_DIMM				4
#define T_RFC_DIMM				208
#define T_REFI_DIMM				6240 
#define T_CWD_DIMM				5
#define T_RTRS_DIMM				2
#define T_PD_MIN_DIMM			4
#define T_XP_DIMM				5
#define T_XP_DLL_DIMM			20
#define T_DATA_TRANS_DIMM		4
#define VDD_DIMM 				1.5
#define IDD0_DIMM 				55
#define IDD2P0_DIMM 			16
#define IDD2P1_DIMM 			32
#define IDD2N_DIMM 				28
#define IDD3P_DIMM 				38
#define IDD3N_DIMM 				38
#define IDD4R_DIMM 				157
#define IDD4W_DIMM 				128
#define IDD5_DIMM 				155
#define RQ_LOOKUP_LATENCY_DIMM	1
#define WQ_LOOKUP_LATENCY_DIMM	10
#define WQ_CAPACITY_DIMM		96

#define NUM_VAULTS_HMC			16
#define	NUM_RANKS_HMC			8
#define	NUM_BANKS_HMC			2
#define	NUM_ROWS_HMC			32768
#define	NUM_COLUMNS_HMC			128
#define	CACHE_LINE_SIZE_HMC		64
#define T_RCD_HMC				11 
#define T_RP_HMC				11 
#define T_CAS_HMC				11
#define T_RC_HMC				39
#define T_RAS_HMC				28
#define T_RRD_HMC				5
#define T_FAW_HMC				32
#define T_WR_HMC				12
#define T_WTR_HMC				6
#define T_RTP_HMC				6
#define T_CCD_HMC				4
#define T_RFC_HMC				208
#define T_REFI_HMC				6240 
#define T_CWD_HMC				5
#define T_RTRS_HMC				2
#define T_PD_MIN_HMC			4
#define T_XP_HMC				5
#define T_XP_DLL_HMC			20
#define T_DATA_TRANS_HMC		4
#define VDD_HMC 				1.5
#define IDD0_HMC 				55
#define IDD2P0_HMC 				16
#define IDD2P1_HMC 				32
#define IDD2N_HMC 				28
#define IDD3P_HMC 				38
#define IDD3N_HMC 				38
#define IDD4R_HMC 				157
#define IDD4W_HMC 				128
#define IDD5_HMC 				155
#define RQ_LOOKUP_LATENCY_HMC	1
#define WQ_LOOKUP_LATENCY_HMC	10
#define WQ_CAPACITY_HMC			96

void read_config_vars()
{
	
	PROCESSOR_CLK_MULTIPLIER = PROCESSOR_CLK_MULTIPLIER_VAL;
	DIMM_CLK_MULTIPLIER = DIMM_CLK_MULTIPLIER_VAL;
	HMC_CLK_MULTIPLIER = HMC_CLK_MULTIPLIER_VAL;
	SERDES_CLK_MULTIPLIER =  SERDES_CLK_MULTIPLIER_VAL;
	NUM_HMCS = NUM_HMCS_VAL;
	NUM_DIMMS = NUM_DIMMS_VAL;
	ROBSIZE = ROBSIZE_VAL;
	MAX_RETIRE = MAX_RETIRE_VAL;
	PIPELINEDEPTH = PIPELINEDEPTH_VAL;
	NUM_CHANNELS = NUM_CHANNELS_VAL;
	
	ADDRESS_MAPPING = ADDRESS_MAPPING_VAL;
	ADDRESS_BITS = ADDRESS_BITS_VAL;
	RQ_LINK_LATENCY = RQ_LINK_LATENCY_VAL;
	WQ_LINK_LATENCY = WQ_LINK_LATENCY_VAL;
	
	for(int i = 0; i < NUM_CHANNELS; i++) {
	
		if(i < NUM_HMCS) {
			MEMORY_CLK_MULTIPLIER[i] = HMC_CLK_MULTIPLIER;
			NUM_VAULTS[i] = NUM_VAULTS_HMC;
			NUM_RANKS[i] =  NUM_RANKS_HMC;
			NUM_BANKS[i] = NUM_BANKS_HMC;
			NUM_ROWS[i] = NUM_ROWS_HMC;
			NUM_COLUMNS[i] = NUM_COLUMNS_HMC;
			CACHE_LINE_SIZE[i] = CACHE_LINE_SIZE_HMC;
			T_RCD[i] = T_RCD_HMC;
			T_RP[i] = T_RP_HMC;
			T_CAS[i] = T_CAS_HMC;
			T_RC[i] = T_RC_HMC;
			T_RAS[i] = T_RAS_HMC;
			T_RRD[i] = T_RRD_HMC;
			T_FAW[i] = T_FAW_HMC;
			T_WR[i] = T_WR_HMC;
			T_WTR[i] = T_WTR_HMC;
			T_RTP[i] = T_RTP_HMC;
			T_CCD[i] = T_CCD_HMC;
			T_RFC[i] = T_RFC_HMC;
			T_REFI[i] = T_REFI_HMC;
			T_CWD[i] = T_CWD_HMC;
			T_RTRS[i] = T_RTRS_HMC;
			T_PD_MIN[i] = T_PD_MIN_HMC;
			T_XP[i] = T_XP_HMC;
			T_XP_DLL[i] = T_XP_DLL_HMC;
			T_DATA_TRANS[i] = T_DATA_TRANS_HMC;
			VDD[i] = VDD_HMC;
			IDD0[i] = IDD0_HMC;
			IDD2P0[i] = IDD2P0_HMC;
			IDD2P1[i] = IDD2P1_HMC;
			IDD2N[i] = IDD2N_HMC;
			IDD3P[i] = IDD3P_HMC;
			IDD3N[i] = IDD3N_HMC;
			IDD4R[i] = IDD4R_HMC;
			IDD4W[i] = IDD4W_HMC;
			IDD5[i] = IDD5_HMC;
			
			RQ_LOOKUP_LATENCY[i] = RQ_LOOKUP_LATENCY_HMC;
			WQ_LOOKUP_LATENCY[i] = WQ_LOOKUP_LATENCY_HMC;
			WQ_CAPACITY[i] = WQ_CAPACITY_HMC;
		}
		else {
			MEMORY_CLK_MULTIPLIER[i] = DIMM_CLK_MULTIPLIER;
			NUM_VAULTS[i] = NUM_VAULTS_DIMM;
			NUM_RANKS[i] = NUM_RANKS_DIMM;
			NUM_BANKS[i] = NUM_BANKS_DIMM;
			NUM_ROWS[i] = NUM_ROWS_DIMM;
			NUM_COLUMNS[i] = NUM_COLUMNS_DIMM;
			CACHE_LINE_SIZE[i] = CACHE_LINE_SIZE_DIMM;
			T_RCD[i] = T_RCD_DIMM;
			T_RP[i] = T_RP_DIMM;
			T_CAS[i] = T_CAS_DIMM;
			T_RC[i] = T_RC_DIMM;
			T_RAS[i] = T_RAS_DIMM;
			T_RRD[i] = T_RRD_DIMM;
			T_FAW[i] = T_FAW_DIMM;
			T_WR[i] = T_WR_DIMM;
			T_WTR[i] = T_WTR_DIMM;
			T_RTP[i] = T_RTP_DIMM;
			T_CCD[i] = T_CCD_DIMM;
			T_RFC[i] = T_RFC_DIMM;
			T_REFI[i] = T_REFI_DIMM;
			T_CWD[i] = T_CWD_DIMM;
			T_RTRS[i] = T_RTRS_DIMM;
			T_PD_MIN[i] = T_PD_MIN_DIMM;
			T_XP[i] = T_XP_DIMM;
			T_XP_DLL[i] = T_XP_DLL_DIMM; 
			T_DATA_TRANS[i] = T_DATA_TRANS_DIMM;
			VDD[i] = VDD_DIMM;
			IDD0[i] = IDD0_DIMM;
			IDD2P0[i] = IDD2P0_DIMM;
			IDD2P1[i] = IDD2P1_DIMM;
			IDD2N[i] = IDD2N_DIMM;
			IDD3P[i] = IDD3P_DIMM;
			IDD3N[i] = IDD3N_DIMM;
			IDD4R[i] = IDD4R_DIMM;
			IDD4W[i] = IDD4W_DIMM;
			IDD5[i] = IDD5_DIMM;

			RQ_LOOKUP_LATENCY[i] = RQ_LOOKUP_LATENCY_DIMM;
			WQ_LOOKUP_LATENCY[i] = WQ_LOOKUP_LATENCY_DIMM;
			WQ_CAPACITY[i] = WQ_CAPACITY_DIMM;
		}
	}
}

void print_params()
{
	printf("PLACEHOLDER FOR SIMULATOR PARAMETERS.\n");
}
	

#endif // __CONFIG_FILE_IN_H__
